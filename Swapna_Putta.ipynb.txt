{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": " Swapna_Putta",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "0A3D_Oahtb96"
      },
      "source": [
        "from keras.datasets import mnist\n",
        "data = mnist.load_data()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FcmfP7kHuBGv"
      },
      "source": [
        "((x_train,y_train),(x_test,y_test))=data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pamj-Wp4uql3"
      },
      "source": [
        "x_train =x_train.reshape((x_train.shape[0],28*28)).astype('float32')\n",
        "x_test =x_test.reshape((x_test.shape[0],28*28)).astype('float32')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wsqhC1xMwsba"
      },
      "source": [
        "x_train = x_train /255\n",
        "x_test  = x_test /255"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LRq8gJCxxGNv",
        "outputId": "960e0832-2f63-4ad2-ce31-96e18efe479b"
      },
      "source": [
        "from keras.utils import np_utils\n",
        "print(y_test.shape)\n",
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test =np_utils.to_categorical(y_test)\n",
        "\n",
        "num_classes=y_test.shape[1]\n",
        "print(y_test.shape )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(10000,)\n",
            "(10000, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YO3dfVqkympm"
      },
      "source": [
        "from keras.models import Sequential \n",
        "from keras.layers import Dense"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QVKyF6P7y9WP"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Dense(32,input_dim = 28*28,activation='relu'))\n",
        "model.add(Dense(64,activation='relu'))\n",
        "model.add(Dense(10,activation='softmax'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J_DzYtk702X2"
      },
      "source": [
        "model.compile(loss ='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uzD0TWqU124z",
        "outputId": "81eac596-54ca-468c-8816-7c48688dd40d"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_6 (Dense)              (None, 32)                25120     \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 64)                2112      \n",
            "_________________________________________________________________\n",
            "dense_8 (Dense)              (None, 10)                650       \n",
            "=================================================================\n",
            "Total params: 27,882\n",
            "Trainable params: 27,882\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aGMr-AtC2Cpb",
        "outputId": "bf37e4cf-56e1-4c2e-9651-7b8fb0a2012e"
      },
      "source": [
        "model.fit(x_train,y_train,epochs=110,batch_size=100)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/110\n",
            "600/600 [==============================] - 2s 2ms/step - loss: 2.3018 - accuracy: 0.1106\n",
            "Epoch 2/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.3012 - accuracy: 0.1130\n",
            "Epoch 3/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.3013 - accuracy: 0.1085\n",
            "Epoch 4/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.3007 - accuracy: 0.1144\n",
            "Epoch 5/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.2993 - accuracy: 0.1125\n",
            "Epoch 6/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.2880 - accuracy: 0.1328\n",
            "Epoch 7/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.2326 - accuracy: 0.1889\n",
            "Epoch 8/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.1397 - accuracy: 0.2157\n",
            "Epoch 9/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 2.0557 - accuracy: 0.2340\n",
            "Epoch 10/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.9863 - accuracy: 0.2549\n",
            "Epoch 11/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.9370 - accuracy: 0.2700\n",
            "Epoch 12/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.8930 - accuracy: 0.2849\n",
            "Epoch 13/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.8610 - accuracy: 0.2952\n",
            "Epoch 14/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.8197 - accuracy: 0.3056\n",
            "Epoch 15/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.7926 - accuracy: 0.3142\n",
            "Epoch 16/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.7717 - accuracy: 0.3191\n",
            "Epoch 17/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.7460 - accuracy: 0.3281\n",
            "Epoch 18/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.7322 - accuracy: 0.3323\n",
            "Epoch 19/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.7109 - accuracy: 0.3415\n",
            "Epoch 20/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6954 - accuracy: 0.3439\n",
            "Epoch 21/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6820 - accuracy: 0.3479\n",
            "Epoch 22/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6734 - accuracy: 0.3494\n",
            "Epoch 23/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6491 - accuracy: 0.3622\n",
            "Epoch 24/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6448 - accuracy: 0.3623\n",
            "Epoch 25/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6333 - accuracy: 0.3633\n",
            "Epoch 26/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6219 - accuracy: 0.3698\n",
            "Epoch 27/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6184 - accuracy: 0.3710\n",
            "Epoch 28/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.6047 - accuracy: 0.3746\n",
            "Epoch 29/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5904 - accuracy: 0.3823\n",
            "Epoch 30/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5822 - accuracy: 0.3840\n",
            "Epoch 31/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5773 - accuracy: 0.3835\n",
            "Epoch 32/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5722 - accuracy: 0.3885\n",
            "Epoch 33/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5641 - accuracy: 0.3960\n",
            "Epoch 34/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5556 - accuracy: 0.3949\n",
            "Epoch 35/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5448 - accuracy: 0.4023\n",
            "Epoch 36/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5453 - accuracy: 0.4022\n",
            "Epoch 37/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5385 - accuracy: 0.4012\n",
            "Epoch 38/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5234 - accuracy: 0.4089\n",
            "Epoch 39/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5194 - accuracy: 0.4128\n",
            "Epoch 40/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5157 - accuracy: 0.4182\n",
            "Epoch 41/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.5036 - accuracy: 0.4154\n",
            "Epoch 42/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4944 - accuracy: 0.4211\n",
            "Epoch 43/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4850 - accuracy: 0.4274\n",
            "Epoch 44/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4803 - accuracy: 0.4298\n",
            "Epoch 45/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4730 - accuracy: 0.4353\n",
            "Epoch 46/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4642 - accuracy: 0.4335\n",
            "Epoch 47/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4566 - accuracy: 0.4412\n",
            "Epoch 48/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4417 - accuracy: 0.4478\n",
            "Epoch 49/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4344 - accuracy: 0.4528\n",
            "Epoch 50/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4258 - accuracy: 0.4563\n",
            "Epoch 51/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.4183 - accuracy: 0.4639\n",
            "Epoch 52/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3986 - accuracy: 0.4703\n",
            "Epoch 53/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3814 - accuracy: 0.4823\n",
            "Epoch 54/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3624 - accuracy: 0.4940\n",
            "Epoch 55/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3432 - accuracy: 0.5040\n",
            "Epoch 56/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3420 - accuracy: 0.5072\n",
            "Epoch 57/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3167 - accuracy: 0.5195\n",
            "Epoch 58/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.3030 - accuracy: 0.5299\n",
            "Epoch 59/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.2755 - accuracy: 0.5408\n",
            "Epoch 60/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.2577 - accuracy: 0.5488\n",
            "Epoch 61/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.2367 - accuracy: 0.5593\n",
            "Epoch 62/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.2111 - accuracy: 0.5700\n",
            "Epoch 63/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.1907 - accuracy: 0.5774\n",
            "Epoch 64/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.1750 - accuracy: 0.5849\n",
            "Epoch 65/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.1419 - accuracy: 0.5965\n",
            "Epoch 66/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.1253 - accuracy: 0.6023\n",
            "Epoch 67/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.1040 - accuracy: 0.6122\n",
            "Epoch 68/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.0796 - accuracy: 0.6202\n",
            "Epoch 69/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.0637 - accuracy: 0.6319\n",
            "Epoch 70/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.0384 - accuracy: 0.6431\n",
            "Epoch 71/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.0277 - accuracy: 0.6442\n",
            "Epoch 72/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 1.0079 - accuracy: 0.6510\n",
            "Epoch 73/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9938 - accuracy: 0.6559\n",
            "Epoch 74/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9809 - accuracy: 0.6601\n",
            "Epoch 75/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9786 - accuracy: 0.6630\n",
            "Epoch 76/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9670 - accuracy: 0.6630\n",
            "Epoch 77/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9378 - accuracy: 0.6771\n",
            "Epoch 78/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9222 - accuracy: 0.6826\n",
            "Epoch 79/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9206 - accuracy: 0.6832\n",
            "Epoch 80/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9151 - accuracy: 0.6837\n",
            "Epoch 81/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.9042 - accuracy: 0.6925\n",
            "Epoch 82/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8985 - accuracy: 0.6901\n",
            "Epoch 83/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8790 - accuracy: 0.7009\n",
            "Epoch 84/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8783 - accuracy: 0.6989\n",
            "Epoch 85/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8665 - accuracy: 0.7058\n",
            "Epoch 86/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8553 - accuracy: 0.7102\n",
            "Epoch 87/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8549 - accuracy: 0.7093\n",
            "Epoch 88/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8363 - accuracy: 0.7181\n",
            "Epoch 89/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8385 - accuracy: 0.7125\n",
            "Epoch 90/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8336 - accuracy: 0.7188\n",
            "Epoch 91/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8249 - accuracy: 0.7222\n",
            "Epoch 92/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8247 - accuracy: 0.7222\n",
            "Epoch 93/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8148 - accuracy: 0.7278\n",
            "Epoch 94/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.8094 - accuracy: 0.7311\n",
            "Epoch 95/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7955 - accuracy: 0.7333\n",
            "Epoch 96/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7995 - accuracy: 0.7338\n",
            "Epoch 97/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7914 - accuracy: 0.7364\n",
            "Epoch 98/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7811 - accuracy: 0.7409\n",
            "Epoch 99/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7715 - accuracy: 0.7436\n",
            "Epoch 100/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7708 - accuracy: 0.7461\n",
            "Epoch 101/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7722 - accuracy: 0.7468\n",
            "Epoch 102/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7564 - accuracy: 0.7509\n",
            "Epoch 103/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7558 - accuracy: 0.7549\n",
            "Epoch 104/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7544 - accuracy: 0.7529\n",
            "Epoch 105/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7446 - accuracy: 0.7580\n",
            "Epoch 106/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7448 - accuracy: 0.7569\n",
            "Epoch 107/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7403 - accuracy: 0.7595\n",
            "Epoch 108/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7284 - accuracy: 0.7631\n",
            "Epoch 109/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7220 - accuracy: 0.7672\n",
            "Epoch 110/110\n",
            "600/600 [==============================] - 1s 2ms/step - loss: 0.7170 - accuracy: 0.7701\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tensorflow.python.keras.callbacks.History at 0x7ff173cd7c90>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VxwgIJf-28wb",
        "outputId": "77ca4d82-a1d3-48c4-8382-1855738ffd86"
      },
      "source": [
        "scores = model.evaluate(x_test , y_test)\n",
        "print(scores)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "313/313 [==============================] - 0s 942us/step - loss: 0.7097 - accuracy: 0.7649\n",
            "[0.7096624970436096, 0.7649000287055969]\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}